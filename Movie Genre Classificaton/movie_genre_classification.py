# -*- coding: utf-8 -*-
"""Movie Genre Classification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1akiRV7a_5kjtCtqJ5qF54KWTC9A8PUyS
"""

import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, classification_report
from sklearn.model_selection import train_test_split

training_data_file = "train_data.txt"
validation_data_file = "test_data_solution.txt"
test_data_file = "test_data.txt"

train_df = pd.read_csv(training_data_file, delimiter=" ::: ", names=["index", "movie_name", "genre", "description"])
validation_df = pd.read_csv(validation_data_file, delimiter=" ::: ", names=["index", "movie_name", "genre", "description"])
test_df = pd.read_csv(test_data_file, delimiter=" ::: ", names=["index", "movie_name", "description"])
combined_df = pd.concat([train_df, validation_df])

combined_df.head()

tfidf_vectorizer = TfidfVectorizer(max_features=5000, stop_words='english')
X = tfidf_vectorizer.fit_transform(combined_df['description'])
y = combined_df['genre']

X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)

X_test = tfidf_vectorizer.transform(test_df['description'])
y_test = validation_df['genre']

# Create a dictionary with different models, excluding SVM
models = {
    "Naive Bayes": MultinomialNB(),
    "Logistic Regression": LogisticRegression(max_iter=200)
}

# Train and evaluate each model
for model_name, model in models.items():
    # Train the model
    model.fit(X_train, y_train)

    # Predict on the validation set or test data
    y_pred = model.predict(X_test)

    # Evaluate performance
    accuracy = accuracy_score(y_test, y_pred)
    print(f"{model_name} Accuracy: {accuracy:.4f}")
    print(f"{model_name} Classification Report:\n", classification_report(y_test, y_pred))

# Function to predict the genre of a new movie based on its description
def predict_genre(movie_description):
    # Transform the new movie description into the TF-IDF format
    description_tfidf = tfidf_vectorizer.transform([movie_description])

    # Use the trained Naive Bayes model to predict the genre (you can choose any model)
    predicted_genre = models["Naive Bayes"].predict(description_tfidf)
    return predicted_genre[0]

movie_description = input("Enter the movie description:")
predicted_genre = predict_genre(movie_description)
print(f"The predicted genre for the movie is: {predicted_genre}")