# -*- coding: utf-8 -*-
"""Credit Card Fraud Detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XVfy84yR8rmCNJwtyo2z0tfHCdaBJLZs
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, accuracy_score, confusion_matrix
import matplotlib.pyplot as plt
from sklearn.tree import plot_tree

train_data = pd.read_csv("fraudTrain.csv")
test_data = pd.read_csv("fraudTest.csv")

print("Train data missing values:\n", train_data.isnull().sum())
print("Test data missing values:\n", test_data.isnull().sum())

train_data = pd.get_dummies(train_data, columns=['category', 'gender', 'state'])
test_data = pd.get_dummies(test_data, columns=['category', 'gender', 'state'])

train_data, test_data = train_data.align(test_data, join='inner', axis=1)

X_train = train_data.drop(['is_fraud', 'trans_date_trans_time', 'first', 'last', 'street', 'city', 'zip', 'job', 'dob', 'trans_num'], axis=1)
y_train = train_data['is_fraud']
X_test = test_data.drop(['is_fraud', 'trans_date_trans_time', 'first', 'last', 'street', 'city', 'zip', 'job', 'dob', 'trans_num'], axis=1)
y_test = test_data['is_fraud']

# Drop non-numeric and irrelevant columns
non_numeric_columns = ['trans_date_trans_time', 'first', 'last', 'street', 'city', 'zip', 'job', 'dob', 'trans_num', 'merchant']
X_train = train_data.drop(non_numeric_columns + ['is_fraud'], axis=1)
y_train = train_data['is_fraud']
X_test = test_data.drop(non_numeric_columns + ['is_fraud'], axis=1)
y_test = test_data['is_fraud']

# Verify if all columns are now numeric
print("Columns in X_train after dropping non-numeric columns:\n", X_train.dtypes)

# Scale the data
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Now you can proceed with model training and evaluation

logistic_model = LogisticRegression(random_state=0)
decision_tree_model = DecisionTreeClassifier(random_state=0)
random_forest_model = RandomForestClassifier(random_state=0)

X_train = X_train[y_train.notnull()]
y_train = y_train.dropna()

print("\nLogistic Regression Results:")

logistic_model.fit(X_train,y_train)
y_pred_logistic = logistic_model.predict(X_test)
print("Accuracy:", accuracy_score(y_test, y_pred_logistic))
print(classification_report(y_test, y_pred_logistic))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred_logistic))

print("\nDecision Tree Results:")
decision_tree_model.fit(X_train, y_train)
y_pred_tree = decision_tree_model.predict(X_test)
print("Accuracy:", accuracy_score(y_test, y_pred_tree))
print(classification_report(y_test, y_pred_tree))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred_tree))

print("\nRandom Forest Results:")
random_forest_model.fit(X_train, y_train)
y_pred_forest = random_forest_model.predict(X_test)
print("Accuracy:", accuracy_score(y_test, y_pred_forest))
print(classification_report(y_test, y_pred_forest))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred_forest))

model_names = ['Logistic Regression', 'Decision Tree', 'Random Forest']
accuracies = []

print("\nLogistic Regression Results:")
logistic_model.fit(X_train, y_train)
y_pred_logistic = logistic_model.predict(X_test)
accuracy_logistic = accuracy_score(y_test, y_pred_logistic)
accuracies.append(accuracy_logistic)
print("Accuracy:", accuracy_logistic)
print(classification_report(y_test, y_pred_logistic))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred_logistic))

print("\nDecision Tree Results:")
decision_tree_model.fit(X_train, y_train)
y_pred_tree = decision_tree_model.predict(X_test)
accuracy_tree = accuracy_score(y_test, y_pred_tree)
accuracies.append(accuracy_tree)
print("Accuracy:", accuracy_tree)
print(classification_report(y_test, y_pred_tree))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred_tree))

print("\nRandom Forest Results:")
random_forest_model.fit(X_train, y_train)
y_pred_forest = random_forest_model.predict(X_test)
accuracy_forest = accuracy_score(y_test, y_pred_forest)
accuracies.append(accuracy_forest)
print("Accuracy:", accuracy_forest)
print(classification_report(y_test, y_pred_forest))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred_forest))

plt.figure(figsize=(8, 6))
plt.bar(model_names, accuracies, color=['blue', 'green', 'orange'])
plt.xlabel("Model")
plt.ylabel("Accuracy")
plt.title("Accuracy Comparison of Models")
plt.show()

best_model_name = model_names[accuracies.index(max(accuracies))]
print(f"\nThe model with the highest accuracy is: {best_model_name}")